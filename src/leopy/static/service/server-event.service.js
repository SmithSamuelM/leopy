// Generated by CoffeeScript 1.9.1
(function() {
  angular.module("app.lib.devices").service("ServerEventSvc", function($log, Actuator, broadcaster, devices, EventSrvc, Sensor, Solution, EVENT_UNLOCKED_ACTUATORS, EVENT_ACTUATOR_UPDATE, EVENT_SOLUTION_UPDATE, EVENT_SENSOR_EVENT) {
    var closeEventStream, isArray, openEventStream, self, setupEvents;
    self = this;
    this.debug = false;
    this.eventsOpened = false;
    closeEventStream = function() {
      if (self.debug) {
        $log.debug("Closing Event Stream");
      }
      EventSrvc.close();
      return self.eventsOpened = false;
    };
    openEventStream = function(callback, tag) {
      var openPromise;
      if (self.debug) {
        $log.debug("Opening Event Stream");
      }
      openPromise = EventSrvc.open({}, callback, tag);
      openPromise.then(function() {
        if (self.debug) {
          $log.debug("Success Opening Event Stream");
        }
        return self.eventsOpened = true;
      })["catch"](function(data) {
        if (self.debug) {
          return $log.debug("Error Opening Event Stream " + data);
        }
      });
      return openPromise;
    };
    isArray = function(object) {
      return Object.prototype.toString.call(object) === "[object Array]";
    };
    this.processEvent = function(event) {
      var actuator, i, j, k, len, len1, len2, newActuator, newSensor, newSolution, ref, ref1, ref2;
      if (self.debug) {
        $log.debug("Event = ", event);
      }
      if (event.tag === EVENT_ACTUATOR_UPDATE) {
        if (self.debug) {
          $log.debug("Event: Actuator Found");
        }
        if (isArray(event.data)) {
          if (self.debug) {
            $log.debug(">>>> array data");
          }
          ref = event.data;
          for (i = 0, len = ref.length; i < len; i++) {
            actuator = ref[i];
            newActuator = new Actuator(actuator);
            if (self.debug) {
              $log.debug(">>>> actuator: ", newActuator);
            }
            devices.addActuator(newActuator);
          }
        } else {
          if (self.debug) {
            $log.debug(">>>> single actuator data");
          }
          newActuator = new Actuator(event.data);
          if (self.debug) {
            $log.debug(">>>> actuator: ", newActuator);
          }
          devices.addActuator(newActuator);
        }
        broadcaster.send(event.tag, newActuator);
        return;
      }
      if (event.tag === EVENT_SENSOR_EVENT) {
        if (self.debug) {
          $log.debug("Event: Sensor Found");
        }
        if (isArray(event.data)) {
          if (self.debug) {
            $log.debug(">>>> array data");
          }
          ref1 = event.data;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            actuator = ref1[j];
            newSensor = new Sensor(actuator);
            if (self.debug) {
              $log.debug(">>>> actuator: ", newSensor);
            }
            devices.addSensor(newSensor);
          }
        } else {
          if (self.debug) {
            $log.debug(">>>> single actuator data");
          }
          newSensor = new Sensor(event.data);
          if (self.debug) {
            $log.debug(">>>> actuator: ", newSensor);
          }
          devices.addSensor(newSensor);
        }
        broadcaster.send(event.tag, newSensor);
        return;
      }
      if (event.tag === EVENT_SOLUTION_UPDATE) {
        if (self.debug) {
          $log.debug("Event: Solution Found");
        }
        if (isArray(event.data)) {
          if (self.debug) {
            $log.debug(">>>> array data");
          }
          ref2 = event.data;
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            actuator = ref2[k];
            newSolution = new Solution(actuator);
            if (self.debug) {
              $log.debug(">>>> actuator: ", newSolution);
            }
            devices.addSolution(newSolution);
          }
        } else {
          if (self.debug) {
            $log.debug(">>>> single actuator data");
          }
          newSolution = new Solution(event.data);
          if (self.debug) {
            $log.debug(">>>> actuator: ", newSolution);
          }
          devices.addSolution(newSolution);
        }
        broadcaster.send(event.tag, newSolution);
        return;
      }
      return $log.warn("Unknown event: ", event);
    };
    setupEvents = function() {
      closeEventStream();
      return openEventStream(self.processEvent);
    };
    setupEvents();
    return this;
  });

}).call(this);

//# sourceMappingURL=server-event.service.js.map
